---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by YU.
--- DateTime: 2024/3/23 20:26
---


MasterLoot = AceLibrary("AceAddon-2.0"):new("AceEvent-2.0","AceModuleCore-2.0","AceComm-2.0","AceDB-2.0","AceDebug-2.0","AceConsole-2.0","FuBarPlugin-2.0", "AceHook-2.1")
local L = AceLibrary("AceLocale-2.2"):new("MasterLoot")

MasterLoot.hasIcon = "Interface\\Buttons\\UI-GroupLoot-Dice-Up"
MasterLoot.defaultMinimapPosition = 270
MasterLoot.hideWithoutStandby = true
MasterLoot.options = {
    type = "group",
    args = {
        AutoLootToggle = {
            type = "toggle",
            name = L["通通归我"],
            desc = L["通通归我描述"],
            order = 1,
            get = function() return  MasterLoot:GetAutoLoot() end,
            set = function() MasterLoot:SetAutoLoot() end,
        },
        AutoRRToggle = {
            type = "toggle",
            name = L["见者有份"],
            desc = L["见者有份描述"],
            order = 2,
            get = function() return MasterLoot:GetAutoRR() end,
            set = function() MasterLoot:SetAutoRR() end,
        },
        AddTargetExecute = {
            type = "execute",
            name = L["添加目标"],
            desc = L["添加目标描述"],
            order = 3,
            func = function() MasterLoot:AddTargetToPriorityList() end,
        },
        ShowPriorityList = {
            type = "execute",
            name = L["显示列表"],
            desc = L["显示列表描述"],
            order = 4,
            func = function() MasterLoot:ShowPriorityList() end,
        },
        CleanPriorityList = {
            type = "execute",
            name = L["清除列表"],
            desc = L["清除列表描述"],
            order = 5,
            func = function() MasterLoot:CleanPriorityList()  end,
        },
    }
}
function MasterLoot:OnInitialize()
    self:SetDebugLevel(3)
    self:SetDebugging(true)
    self:RegisterDB("MasterLootDB")
    self:RegisterDefaults("profile", {
        PriorityList = {},
        AutoLoot = false,
        AutoRR = false,
    })
    self:OnProfileEnable()
    self.OnMenuRequest = MasterLoot.options
    self:RegisterChatCommand({"/ML", "/MasterLoot"}, MasterLoot.options)
    DEFAULT_CHAT_FRAME:AddMessage(string.format("%s : %s", L["小皮箱队团队助手"], L["已加载"]))
end

function MasterLoot:OnProfileEnable()
    self.opt = self.db.profile
end

function MasterLoot:OnEnable()
    MasterLoot.MLF = MasterLootFrame
    self.MLF:OnEnable()
    self:Hook("LootFrame_OnEvent","OnEvent", true)
end

function MasterLoot:OnEvent(event)
    local method, id = GetLootMethod()
    if method ~= 'master' or id ~= 0 then
        return self.hooks.LootFrame_OnEvent(event)
    end

    self.MLF.isRaid =  GetNumRaidMembers() > 0 and true or false
    self.MLF.prefix =  self.MLF.isRaid  and "raid" or "party"
    self.MLF.channelChat = self.MLF.isRaid and "RAID" or "PARTY"
    if event == "LOOT_OPENED"  then
        for li = 1, GetNumLootItems() do
            local _, _, quantity, quality = GetLootSlotInfo(li)
            if quantity ~= 0 and quality < 2 then
                if  self.opt.AutoLoot then
                    self.MLF:GLTC(L["偷偷分给"], self.MLF.playerName,nil, nil)
                elseif self.opt.AutoRR then
                    self.MLF:GetRandomCandidate(li)
                end
            end
        end
    elseif event == "OPEN_MASTER_LOOT_LIST" then
        return self.MLF:SetupFrame()
    elseif event == "UPDATE_MASTER_LOOT_LIST" then
        return self.MLF.DropDown:Refresh(1)
    end
    collectgarbage()
    return self.hooks.LootFrame_OnEvent(event)
end

function MasterLoot:OnDisable()
    self:UnhookAll()
    self:UnregisterAllEvents()
end


function MasterLoot:GetClassHex(fileName, class, name)
    local ColorfulName, ColorfulClassName = nil, nil
    local c = RAID_CLASS_COLORS[fileName]
    local classHex = string.format("%2x%2x%2x", c.r*255, c.g*255, c.b*255)
    if name then ColorfulName = string.format("|cff%s%s|r", classHex,  name) end
    if class then ColorfulClassName = string.format("|cff%s%s|r", classHex,  class) end
    return classHex, ColorfulClassName, ColorfulName
end

------------------------------------------
---Option function
------------------------------------------
function MasterLoot:GetAutoLoot()
    return self.opt.AutoLoot
end
function MasterLoot:SetAutoLoot()
    self.opt.AutoLoot = not self.opt.AutoLoot
    if self.opt.AutoLoot and self.opt.AutoRR then
        self.opt.AutoRR = not self.opt.AutoRR
    end
    local message = string.format("%s:%s", L["通通归我"], self.opt.AutoLoot==true and L["已开启"] or L["已关闭"] )
    self:Print(message)
end
function MasterLoot:GetAutoRR()
    return self.opt.AutoRR
end
function MasterLoot:SetAutoRR()
    self.opt.AutoRR = not self.opt.AutoRR
    if self.opt.AutoRR and self.opt.AutoLoot then
        self.opt.AutoLoot = not self.opt.AutoLoot
    end
    local message = string.format("%s:%s", L["见者有份"], self.opt.AutoRR==true and L["已开启"] or L["已关闭"] )
    self:Print(message)
end

function MasterLoot:AddTargetToPriorityList()
    local targetName = UnitName("target")
    if not targetName then
        self:Print(L["你必须有目标"])
        return
    end
    table.insert(self.opt.PriorityList, targetName)
    local message = string.format(L["已添加到快捷分配列表"],targetName)
    self:Print(message)
end

function MasterLoot:ShowPriorityList()
    local PriorityNames =  table.concat(self.opt.PriorityList ,", ")
    local message = string.format(L["快捷分配列表名单"],PriorityNames)
    self:Print(message)
end
function MasterLoot:CleanPriorityList()
    self.opt.PriorityList = {}
    self:Print(L["快捷分配列表已重置"])
end